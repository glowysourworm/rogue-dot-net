<UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Rogue.NET.Scenario.Views"
    xmlns:coreView="clr-namespace:Rogue.NET.Core.View;assembly=Rogue.NET.Core"
    xmlns:commonView="clr-namespace:Rogue.NET.Common.View;assembly=Rogue.NET.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    x:Class="Rogue.NET.Scenario.Views.StatusCtrl">
    <UserControl.Resources>
        <ResourceDictionary Source="/Rogue.NET.Core;component/Resource/Converter.xaml">
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary>
                    <Style x:Key="StatsListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="Padding" Value="2,0,0,0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                    <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="true"/>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="true"/>
                                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                            </MultiTrigger.Conditions>
                                        </MultiTrigger>
                                        <Trigger Property="IsEnabled" Value="false"/>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Padding="{TemplateBinding Padding}">
                                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="19"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <Grid>
                                                <Grid.LayoutTransform>
                                                    <TransformGroup>
                                                        <TransformGroup.Children>
                                                            <TransformCollection>
                                                                <RotateTransform Angle="-90"/>
                                                            </TransformCollection>
                                                        </TransformGroup.Children>
                                                    </TransformGroup>
                                                </Grid.LayoutTransform>
                                                <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
                                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
                                            </Grid>
                                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Padding="{TemplateBinding Padding}">
                                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="19"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid>
                                                <Grid.LayoutTransform>
                                                    <TransformGroup>
                                                        <TransformGroup.Children>
                                                            <TransformCollection>
                                                                <RotateTransform Angle="180"/>
                                                            </TransformCollection>
                                                        </TransformGroup.Children>
                                                    </TransformGroup>
                                                </Grid.LayoutTransform>
                                                <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
                                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
                                            </Grid>
                                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Padding="{TemplateBinding Padding}">
                                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="19"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <Grid>
                                                <Grid.LayoutTransform>
                                                    <TransformGroup>
                                                        <TransformGroup.Children>
                                                            <TransformCollection>
                                                                <RotateTransform Angle="90"/>
                                                            </TransformCollection>
                                                        </TransformGroup.Children>
                                                    </TransformGroup>
                                                </Grid.LayoutTransform>
                                                <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
                                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
                                            </Grid>
                                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ExpanderHeaderFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Border>
                                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Padding="{TemplateBinding Padding}">
                                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="19"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Ellipse x:Name="circle" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19"/>
                                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="#666" StrokeThickness="2" VerticalAlignment="Center"/>
                                            <Grid Grid.Column="1"
                                      Visibility="{Binding IsExpanded, Converter={StaticResource BoolInverseVisibilityHiddenConverter}, RelativeSource={RelativeSource AncestorType={x:Type Expander}, Mode=FindAncestor}}" HorizontalAlignment="Stretch" Margin="0" Width="Auto">
                                                <StackPanel Orientation="Horizontal">
                                                    <StackPanel Orientation="Horizontal" Margin="8">
                                                        <TextBlock Foreground="Red" FontSize="14" Text="Hp:  " />
                                                        <TextBlock Foreground="Red" FontSize="14" Text="{Binding Hp, StringFormat=F0}" />
                                                        <TextBlock Foreground="Red" FontSize="14" Text=" / " />
                                                        <TextBlock Foreground="Red" FontSize="14" Text="{Binding HpMax, StringFormat=F0}" />
                                                    </StackPanel>
                                                    <StackPanel Orientation="Horizontal" Margin="8">
                                                        <TextBlock Foreground="Blue" FontSize="14" Text="Mp:  " />
                                                        <TextBlock Foreground="Blue" FontSize="14" Text="{Binding Mp, StringFormat=F0}" />
                                                        <TextBlock Foreground="Blue" FontSize="14" Text=" / " />
                                                        <TextBlock Foreground="Blue" FontSize="14" Text="{Binding MpMax, StringFormat=F0}" />
                                                    </StackPanel>
                                                    <StackPanel Orientation="Horizontal" Margin="8">
                                                        <TextBlock Foreground="LightGreen" FontSize="14" Text="Hunger:  " />
                                                        <TextBlock Foreground="LightGreen" FontSize="14" Text="{Binding Hunger, StringFormat=F0}" />
                                                        <TextBlock Foreground="LightGreen" FontSize="14" Text=" / " />
                                                        <TextBlock Foreground="LightGreen" FontSize="14" Text="100" />
                                                    </StackPanel>
                                                </StackPanel>
                                            </Grid>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
                                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                            <Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="Player" TargetType="{x:Type Expander}">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Expander}">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                                        <DockPanel>
                                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="true">
                                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="ExpandDirection" Value="Right">
                                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                        </Trigger>
                                        <Trigger Property="ExpandDirection" Value="Up">
                                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                        </Trigger>
                                        <Trigger Property="ExpandDirection" Value="Left">
                                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="MiniStatusExpander" TargetType="{x:Type Expander}">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Expander}">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                                        <DockPanel>
                                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{DynamicResource MiniStatusExpanderHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Left" VerticalAlignment="Top" Cursor="Hand"/>
                                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="true">
                                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="ExpandDirection" Value="Right">
                                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                        </Trigger>
                                        <Trigger Property="ExpandDirection" Value="Up">
                                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                        </Trigger>
                                        <Trigger Property="ExpandDirection" Value="Left">
                                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="24" />
            <RowDefinition Height="24" />
            <RowDefinition Height="24" />
            <RowDefinition Height="24" />
            <RowDefinition Height="24" />
            <RowDefinition Height="24" />
        </Grid.RowDefinitions>
        <Grid Margin="0,0,8,8">
            <coreView:Smiley x:Name="smileyCtrl" 
                                 Margin="0,0,8,8" 
                                 SmileyMood="{Binding SmileyMood}"  
                                 SmileyColor="{Binding SmileyBodyColor, Converter={StaticResource StringColorConverter}}" 
                                 SmileyLineColor="{Binding SmileyLineColor, Converter={StaticResource StringColorConverter}}" 
                                 SmileyRadius="8" 
                                 Width="50" 
                                 Height="75" 
                                 HorizontalAlignment="Left" />
            <StackPanel Margin="80,0,0,0">
                <TextBlock Width="Auto" Height="Auto" Text="{Binding RogueName}" TextWrapping="Wrap" Foreground="#FFFFE56E" Margin="8,8,0,0" FontFamily="Century" FontSize="14"/>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="Auto" Height="Auto" Text="Level " TextWrapping="Wrap" Foreground="#FFFFE56E" Margin="8,8,0,0" FontFamily="Century" FontSize="14"/>
                    <TextBlock Width="Auto" Height="Auto" Text="{Binding Level}" TextWrapping="Wrap"  Foreground="#FFFFE56E" Margin="8,8,0,0" FontFamily="Century" FontSize="14"/>
                    <TextBlock Width="Auto" Height="Auto" Text="{Binding Class}" TextWrapping="Wrap"  Foreground="#FFFFE56E" Margin="8,8,0,0" FontFamily="Century" FontSize="14"/>
                </StackPanel>
                <TextBlock Width="Auto" Height="Auto" Text="Mood:  Happy" TextWrapping="Wrap" Foreground="#FFFFE56E" Margin="8,8,0,0" FontFamily="Century" FontSize="14"/>
            </StackPanel>
        </Grid>
        <commonView:ProgressBar Grid.Row="1" BarColor1="Red" ValueMax="{Binding HpMax}" Value="{Binding Hp}" Margin="0,2" x:Name="HPBar" VerticalAlignment="Stretch" Height="16" ValueTextBrush="#FFFFFFAA" Value2="{Binding Hp}"/>
        <commonView:ProgressBar Grid.Row="2" BarColor1="Blue" ValueMax="{Binding MpMax}" Value="{Binding Mp}" Margin="0,2" x:Name="MPBar" VerticalAlignment="Stretch" Height="16"  Header="MP" ValueTextBrush="#FFCCCCFF" Value2="{Binding Mp}"/>
        <commonView:ProgressBar Grid.Row="3" BarColor1="DarkGreen" ValueMax="100" Value="{Binding Hunger}" Margin="0,2" x:Name="HungerBar" VerticalAlignment="Stretch" Height="16" Header="Hunger" ValueTextBrush="#FF9AFFA0" Value2="{Binding Hunger}"/>
        <commonView:ProgressBar Grid.Row="4" BarColor1="Cyan" ValueMax="{Binding ExperienceNext}" Value="{Binding Experience}" Margin="0,2" x:Name="ExperienceBar" VerticalAlignment="Stretch" Height="16"  Header="Exp" ValueTextBrush="#FF00838E" Value2="{Binding Experience}"/>
        <commonView:ProgressBar Grid.Row="5" BarColor1="Purple" Header="Point Exp" ValueTextBrush="Pink" Height="16" Margin="0,2" Value="{Binding SkillPointExperience}" Value2="{Binding SkillPointExperience}" ValueMax="{Binding SkillPointExperienceNext}" />
        <commonView:ProgressBar Grid.Row="6" BarColor1="Goldenrod" ValueMax="{Binding HaulMax}" Value="{Binding Haul}" Margin="0,2" x:Name="HaulBar" VerticalAlignment="Stretch"  Height="16" Header="Haul" ValueTextBrush="#FF9E6300" Value2="{Binding Haul}"/>
    </Grid>
</UserControl>
