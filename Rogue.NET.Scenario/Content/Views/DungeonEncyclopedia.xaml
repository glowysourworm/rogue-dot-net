<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:control="clr-namespace:Rogue.NET.Scenario.Control"
             xmlns:local="clr-namespace:Rogue.NET.Scenario.Views" 
             mc:Ignorable="d" 
             x:Class="Rogue.NET.Scenario.Views.DungeonEncyclopedia" d:DesignWidth="1241.5" d:DesignHeight="606.42">
	<UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Rogue.NET.Core;component/Resource/Converter.xaml" />
                <ResourceDictionary>
                    <DataTemplate x:Key="AttackAttributeTemplate">
                        <local:DungeonEncyclopediaAttackAttributeCtrl Background="Black" />
                    </DataTemplate>
                    <Style x:Key="EntryTextBlockStyleName" TargetType="{x:Type TextBlock}">
                        <Setter Property="Text" Value="{Binding Rogue2Name}" />
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Goldenrod" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding IsIdentified}" Value="False">
                                <Setter Property="Text" Value="???" />
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style x:Key="EntryTextBlockStyleShort" TargetType="{x:Type TextBlock}">
                        <Setter Property="Text" Value="{Binding Description}" />
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Goldenrod" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding IsIdentified}" Value="False">
                                <Setter Property="Text" Value="???" />
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style x:Key="EntryTextBlockStyleLong" TargetType="{x:Type TextBlock}">
                        <Setter Property="Text" Value="{Binding LongDescription}" />
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Goldenrod" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding IsIdentified}" Value="False">
                                <Setter Property="Text" Value="???" />
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style x:Key="EntryLabelTextBlockStyle" TargetType="{x:Type TextBlock}">
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="True" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Goldenrod" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="True" />
                                    <Condition Binding="{Binding IsIdentified}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="Cyan" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsUnique}" Value="False" />
                                    <Condition Binding="{Binding IsObjective}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding IsIdentified}" Value="False">
                                <Setter Property="TextBlock.Foreground" Value="White" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style x:Key="ButtonFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="2" SnapsToDevicePixels="true"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#F3F3F3" Offset="0"/>
                        <GradientStop Color="#EBEBEB" Offset="0.5"/>
                        <GradientStop Color="#DDDDDD" Offset="0.5"/>
                        <GradientStop Color="#CDCDCD" Offset="1"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
                    <Style x:Key="FilterButtonStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
                        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                                        <Trigger Property="IsChecked" Value="true"/>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="#ADADAD"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <ControlTemplate x:Key="RogueFilterButtonStyle" TargetType="{x:Type ButtonBase}">
                        <Grid Height="Auto" Width="Auto">
                            <Rectangle x:Name="rectangle1" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="4" RadiusY="4"/>
                            <Rectangle x:Name="rectangle" Stroke="Black" Margin="8,4" StrokeThickness="0" RadiusX="4" RadiusY="4">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#3EFFFFFF" Offset="0"/>
                                        <GradientStop Offset="0.236"/>
                                        <GradientStop Color="Transparent" Offset="0.799"/>
                                        <GradientStop Offset="1" Color="#3EFFFFFF"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter Property="Fill" TargetName="rectangle">
                                    <Setter.Value>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#8A00FF4A" Offset="0"/>
                                            <GradientStop Offset="0.236"/>
                                            <GradientStop Color="Transparent" Offset="0.776"/>
                                            <GradientStop Color="#8500FF0F" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Stroke" TargetName="rectangle" Value="White"/>
                                <Setter Property="StrokeThickness" TargetName="rectangle" Value="1"/>
                                <Setter Property="OpacityMask" TargetName="rectangle1">
                                    <Setter.Value>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#8C000000" Offset="0"/>
                                            <GradientStop Color="#A0FFFFFF" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="StrokeThickness" TargetName="rectangle" Value="1"/>
                                <Setter Property="Stroke" TargetName="rectangle" Value="White"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                    <Style x:Key="DungeonEncyclopediaToggleButtonStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
                        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="FontSize" Value="18"/>
                        <Setter Property="Cursor" Value="Hand" />
                        <Setter Property="Content" Value="Select" />
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Grid>
                                        <Rectangle x:Name="rectangle" Stroke="White" Margin="0" RadiusX="4" RadiusY="4" Fill="Black"/>
                                        <ContentPresenter x:Name="contentPresenter" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="StrokeThickness" TargetName="rectangle" Value="2"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="Fill" TargetName="rectangle" Value="Blue"/>
                                            <Setter Property="StrokeThickness" TargetName="rectangle" Value="2"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ButtonFocusVisual3">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="ButtonFocusVisual4">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>
                <ResourceDictionary Source="pack://application:,,,/Rogue.NET.Common;component/Resource/Dictionaries/ShinyButton.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
    	<Grid.RowDefinitions>
    		<RowDefinition Height="148"/>
    		<RowDefinition/>
    	</Grid.RowDefinitions>
    	<Grid.ColumnDefinitions>
    		<ColumnDefinition Width="0.468*"/>
    		<ColumnDefinition Width="0.5*"/>
    	</Grid.ColumnDefinitions>
        <Border x:Name="EntryBorder" Margin="8" BorderThickness="1" CornerRadius="10" Grid.Column="1">
            <Border.Style>
                <Style TargetType="{x:Type Border}">
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsObjective}" Value="False" />
                                <Condition Binding="{Binding IsUnique}" Value="False" />
                            </MultiDataTrigger.Conditions>
                        	<Setter Property="BorderBrush" Value="White" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsObjective}" Value="False" />
                                <Condition Binding="{Binding IsUnique}" Value="True" />
                                <Condition Binding="{Binding IsIdentified}" Value="True" />
                            </MultiDataTrigger.Conditions>
                        	<Setter Property="BorderBrush" Value="Goldenrod" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsObjective}" Value="True" />
                                <Condition Binding="{Binding IsUnique}" Value="False" />
                                <Condition Binding="{Binding IsIdentified}" Value="True" />
                            </MultiDataTrigger.Conditions>
                        	<Setter Property="BorderBrush" Value="Cyan" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsObjective}" Value="True" />
                                <Condition Binding="{Binding IsUnique}" Value="True" />
                                <Condition Binding="{Binding IsIdentified}" Value="True" />
                            </MultiDataTrigger.Conditions>
                        	<Setter Property="BorderBrush" Value="Cyan" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsIdentified}" Value="False">
                            <Setter Property="BorderBrush" Value="White" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <Grid x:Name="DataGrid" Margin="8,8,8,0">
        		<Grid.ColumnDefinitions>
        			<ColumnDefinition Width="165"/>
        			<ColumnDefinition/>
                    <ColumnDefinition Width="Auto" />
        		</Grid.ColumnDefinitions>
        		<Grid.RowDefinitions>
        			<RowDefinition Height="Auto"/>
        			<RowDefinition Height="*"/>
        		</Grid.RowDefinitions>
                <StackPanel Grid.Column="1" Orientation="Horizontal">
        		    <TextBlock 
        			    x:Name="NameTB"
        			    Margin="8,0,0,0" 
        			    FontSize="20" 
        			    VerticalAlignment="Center"
        			    HorizontalAlignment="Left"
        			    TextAlignment="Left"
                        Visibility="Visible"
                        Style="{StaticResource EntryTextBlockStyleName}"/>
                    <TextBlock Text="(Unique)" Style="{StaticResource EntryTextBlockStyleName}" Margin="8,0,0,0" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Left" FontStyle="Italic">
                        <TextBlock.Visibility>
                            <MultiBinding Converter="{StaticResource DualBoolVisibilityCollapsedConverter}" ConverterParameter="SomeParameter">
                                <Binding Path="IsIdentified" />
                                <Binding Path="IsUnique" />
                            </MultiBinding>
                        </TextBlock.Visibility>
                    </TextBlock>
                    <TextBlock Text="(Objective)" Style="{StaticResource EntryTextBlockStyleName}" Margin="8,0,0,0" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Left" FontStyle="Italic">
                        <TextBlock.Visibility>
                            <MultiBinding Converter="{StaticResource DualBoolVisibilityCollapsedConverter}" ConverterParameter="SomeParameter">
                                <Binding Path="IsIdentified" />
                                <Binding Path="IsObjective" />
                            </MultiBinding>
                        </TextBlock.Visibility>
                    </TextBlock>
                </StackPanel>
                <!--TextBlock Text="Attack Attributes" Foreground="Beige" 
                           Visibility="{Binding Converter={StaticResource AttackAttributeVisibilityConverter}}"
                           FontStyle="Italic" VerticalAlignment="Center" Margin="4" Grid.Column="2" /-->
        		<TextBlock 
        			x:Name="LongTB"
        			TextWrapping="Wrap" 
        			Grid.Row="1" 
        			Cursor="Arrow"  Style="{StaticResource EntryTextBlockStyleLong}" Grid.Column="1" Margin="8" VerticalAlignment="Top" HorizontalAlignment="Left" FontSize="16"/>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource EntryLabelTextBlockStyle}"  Text="Description" Margin="8" VerticalAlignment="Top" FontSize="16" Grid.Row="1"/>
                <Image Margin="8,0,0,0" Width="20"  Height="30" HorizontalAlignment="Left" Source="{Binding ImageSource}"/>
        	</Grid>
        </Border>
        <Border Grid.ColumnSpan="1" Margin="8" BorderThickness="1" BorderBrush="White" CornerRadius="10" >
        	<Grid x:Name="DataGrid1" Margin="8">
        		<Grid.ColumnDefinitions>
        			<ColumnDefinition Width="0.336*"/>
        			<ColumnDefinition Width="0.664*"/>
        		</Grid.ColumnDefinitions>
        		<Grid.RowDefinitions>
        			<RowDefinition Height="*"/>
        			<RowDefinition Height="*"/>
        			<RowDefinition Height="*"/>
        		</Grid.RowDefinitions>
        		<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Entry Type" VerticalAlignment="Center" Foreground="White" Margin="8,0,0,0" FontSize="18.667"/>
        		<TextBlock x:Name="EntryTypeTB" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center" Foreground="White" Margin="7.997,0,0,0" FontSize="18.667" Grid.Column="1"/>
        		<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Entry Description" VerticalAlignment="Center" Foreground="White" Margin="8,0,0,0" FontSize="18.667" Grid.Row="1"/>
        		<TextBlock x:Name="EntryDescriptionTB" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center" Foreground="White" Margin="7.997,0,0,0" FontSize="18.667" Grid.Column="1" Grid.Row="1"/>
        		<TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Text="Percent Complete" VerticalAlignment="Center" Foreground="White" Margin="8,0,0,0" FontSize="18.667" Grid.Row="4" d:LayoutOverrides="GridBox"/>
        		<TextBlock x:Name="PercentTB" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center" Foreground="White" Margin="7.996,0,0,0" FontSize="18.667" Grid.Column="1" Grid.Row="4" d:LayoutOverrides="GridBox"/>
        	</Grid>
        </Border>
        <Border Margin="8" Grid.Row="1" BorderBrush="White" BorderThickness="1" CornerRadius="10">
            <Grid>
                <ListBox x:Name="CategoryLB"
                         ItemsSource="{Binding Categories}">
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <control:EllipsePanel IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="Width" Value="20" />
                            <Setter Property="Height" Value="30" />
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="Margin" Value="0" />
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
                <Button x:Name="TypeLeftButton" Click="TypeLeftButton_Click" Content="Button" HorizontalAlignment="Left"  Background="Black" BorderBrush="White" Tag="pack://application:,,,/Rogue.NET.Common;component/Resource/Images/LeftArrow.png" VerticalAlignment="Bottom" Width="36" Style="{DynamicResource ShinyButtonStyle}" Height="36" Margin="8" Cursor="Hand"/>
                <Button x:Name="TypeRightButton" Click="TypeRightButton_Click" Background="Black" BorderBrush="White" Tag="pack://application:,,,/Rogue.NET.Common;component/Resource/Images/RightArrow.png" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="36" Height="36" Style="{DynamicResource ShinyButtonStyle}" Margin="8" Cursor="Hand"/>
        	</Grid>
        </Border>
        <Border Grid.Column="1"  Margin="8" Grid.Row="1" BorderBrush="White" BorderThickness="1" CornerRadius="10" >
        	<Grid>
                <ListBox x:Name="SubCategoryLB" 
                              ItemsSource="{Binding ElementName=CategoryLB, Path=SelectedItem.Items}">
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <control:EllipsePanel />
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                </ListBox>
                <Button x:Name="EntryLeftButton" Background="Black" BorderBrush="White" Tag="pack://application:,,,/Rogue.NET.Common;component/Resource/Images/LeftArrow.png" Click="EntryLeftButton_Click" Content="Button" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="36" Style="{DynamicResource ShinyButtonStyle}" Height="36" Margin="8,0,0,8" Cursor="Hand"/>
                <Button x:Name="EntryRightButton" Background="Black" BorderBrush="White" Tag="pack://application:,,,/Rogue.NET.Common;component/Resource/Images/RightArrow.png" Click="EntryRightButton_Click" Content="Button" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="36" Height="36" Style="{DynamicResource ShinyButtonStyle}" Margin="0,0,8,8" Cursor="Hand"/>
        	</Grid>
        </Border>
    </Grid>
</UserControl>