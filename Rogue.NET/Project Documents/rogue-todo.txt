- Attack Attributes - Use the flame sword symbol as a global symbol - replace the one in the item grid to show that there's several attributes. (TBD)
- Outro Display (I Won! - Here's my stats!) (STATS TBD)
- Statistics Display (High Scores) (TBD)
- Reveal Image Transparency (TBD)
- Dialog message Filtering - Add a simple panel of small buttons on the LHS of the Level View (TBD)
- HINTS (TBD)
- Layout Descriptions (To lend narrative to the story... "Evil Approaches..." .. "These are the blah blah blah of the evil blah blah blah"
- Categorize: Skills / Spells; Equipment; Consumables; Animations (TBD)

(BIG TBD's)
- Player Action: Can choose to block physical (strength based), or magical (intelligence based), or maybe even to "run away" by
- 				 granting you an extra portion of a turn. This would be instead of just attacking. (TBD)
- Religious Affiliation:  Add religious affiliation to Alteration - so that it can be blocked or manipulated. Example "Dark Magic": would
						  have Alteration.Affiliation = "Dark Magic", etc... Then, provide way to block spells based on religious affiliation.
						  Also, make skill learning based on affiliation.. or bonuses from defeating enemies based on affiliation.
						  
						  ***BETTER IDEA:  Have religious affiliation be per Character! Then, can alter behavior of combat (alterations and melee) 
							   			   based on religious affiliation. Example:  Player visits "Dark Shrine" .. Becomes 5% Satanic! So, when facing
										   Lynx (20% Light) takes more damage. So, would just have to calulate the difference based on level of
										   affiliation.
										   
										   BEST. ROGUE. IDEA. EVER. (probably not the first person to think so)
										   
										   Ideas:  Permanently alter character symbol based on level of affiliation :) :) :)
										   
												   Magic Block based on religious differences (thought this would be important to tune magic combat.. 
												   too much based on a single parameter)
												   
												   Probably don't want to replace attack attributes for balancing melee (keep simple).. But could
												   add some bonus damage or something.. probably better to have an affect; but keep it simple. Nothing
												   added to items for this... Except for increasing affiliation. So, would have to design a simple way
												   of doing this. May end up like attack attributes :(  Alot of little things to manage.
												   
												   Having several affiliations you'd want to choose based on "what it would do for me?" So say, "Druids"
												   have better use of food resources. Just add FoodUsagePerTurn -= 0.01 to the permanent affiliation to
												   increase "Druid + 5%".
												   
												   BALANCING IDEA: HAVE THESE BE MUTUALLY EXCLUSIVE :) Choosing one affiliation nullifies all others :)
												   PRESENTS A PROBLEM OF UNDO-ING ALL SPECIAL ATTRIBUTES INVOLVED WITH AFFILIATION. So, probably avoid
												   special attributes. Or, just store them like alterations that are removed from a list.
												   
										   Design: Add single collection of affiliations to the Alteration Effect. This would have to be updated like
												   attack attributes from the primary collection (Scenario -> General)
												   
										   IDEA:   Make the affiliation "Skill Building Affiliation"
										   
												   - Set of affiliations described by scenario-wide list:  Name, Short Description, Attribute Bonus
										   
												   - Each skill has affiliation (SkillBuildingAffiliation) with a symbol attached.
										   
												   - Affiliation generates skill points that can be used to advance skills of that affiliation
												   
												   - Affiliation can be enhanced (from 5% -> 10%) by using a doodad. 
												   
												   - Affiliations are mutually exclusive
												   
												   - Affiliation attribute bonuses are granted as passive alterations (so, aren't applied and removed)
												   
												   - Affiliation attribute bonuses are scaled by % of belief in that affiliation. (0 -> 1.00) * (bonus)
												   
												   - Skill points are accrued and applied when the player wishes to apply them.


- Alteration Effect: Add points to active skill (skill learning alteration effect) (TBD)
- Several Validation Points: 
	- Scenario Editor: Dungeon Template Name - UNIQUE and SET and NO FILE-NON-FRIENDLY CHARACTERS
	- Scenario: Player Name SET and UNIQUE and NO FILE-NON-FRIENDLY CHARACTERS
	- Scenario Files: Player Name + Scenario Name.. or put something in the header to show the scenario name also
- Scenario Editor: Fix up the Symbol Alteration logic for the UI. have to represent it properly for flags set.
- Dungeon Wide Events:  Alteration or note-bearing event that fires at random; or once during a specific level range. 
						- Example:  "Corruption" Adds to your player's "Corruption" level every 10,000 steps.. ish
						- Example:  "Turn back while you still can!" (from the big enemy of the scenario) (creates monster)
						- Example:  "Send player back to stairs up" :)  after X number of steps (pretty mean!)
						
- Boost Bar:  An extra boost to alterations or attack. This could be filled: On Step; On Enemy Death; On Attack. So, player 
			  can choose when to use their boost bar to add to the attack.			 

- Alteration:  Teleport within visible range or within range of X or something where enemies teleport near to the player's visible range

- Multi-Level Teleportation: Coordinated using multi-level layouts
- Tertiary Behavior

- Balancing (Paladin) - Add "teleport near (within attack range)" to Hell Hound (TBD)
- Balancing (Paladin) - Add "teleport adjacent" to teleport options (TBD)

- Layout Refactoring:

	- Goals:  Support for:
				- Random Room layouts
				- Intersecting rooms 
				- Maze rooms
				- Room inside a rooms
				- Boss levels (symmetric / static-ish layouts)
				- Hidden pathways: either hidden hallways randomly; hidden paths off the grid; or hidden paths between rooms
				- multiple halls between rooms
				- Big rooms specified by a clickable grid of rooms (specify which rooms are "grouped" in the room grid)
				- Add teleporters to any layout type
				- Points of interest (allows placing objective or unique content on those points)
				- Symmetric layouts
				- Specific shapes for layouts (pentagram, square thing, etc..)
				- Challenge levels (alternate stairwell for a challenge level)
				- Room levels without doors
				- Cell Fill color
				- Linear layouts v.s. non-linear (linear => start to end without options)
				- temporary walls (can demolish by walking through)
				- Switches and push blocks! (would use to open a door or let down a wall.. YEAh!)
				- Cellular Automata (with connected rooms with parameterized hallway thickness)
				- Room "Growing" - Start with a room, create a door or hall with random length. Then iterate to create the next room
				  or rooms (maybe 2 or 3)
				  
				- "Antfarm" procedure that uses random hall splitting (recursive)
				- Identify 'main room' or "first" and "last" rooms. Create connected rooms by showing they're connected to a single room
				  via some other room. First and Last rooms may have the stairwells.. So, could generate sequential "problem" set by having
				  conditions for advancement (beat a monster, find a key, etc..)
				- Monster generation per level (parameter) also, party room parameter
				
- Windows: Would treat like an open door that you can't pass through.. (But maybe could break)
				
- Zones:   Related to level layouts. 

		   - Idea: This would combine level content and layout generation
		   
		   - Goal: To separate the layout into "Zones" that are sequential. Each would have an "Exit Condition"
		   
				   - Step on a switch
				   - Defeat (All, Some, One of "These") enemies
				   - Collect Content
				   - Find a key

		   - Design Problem:  Have to build a layout based on a sequence of zones
		   
				   - ISSUE: CAN'T PERMIT "PITFALL" TYPE EFFECTS BECAUSE THEY BREAK SEQUENCE
				   - Can only allow linear progress through zones. CAN GO BACKWARD (RANDOM LEVEL UP) BUT NOT FORWARD (RANDOM LEVEL DOWN or PITFALL)
		   
		   - Idea: Description of zone problem built into scenario level zone template. 
		   
				   - Describes what to do for exit condition ALONG WITH story-line!
				   
					 GREAT. IDEA.
					 
					 Would allow for something like: "You're in King William's prison in the castle in Britain. You must find a 
													  way out of your cell.. Perhaps there's a secret passage nearby..."
													  
													  for the Level 1 template for zone 1! VERY. COOL.
													  
				   - This would give a LOT of power to the scenario by not only allowing for progressive rewards; but also accrued
					 descriptive - and totally configurable - storyline! :) :) VERY. VERY. GOOD.
					 
		   - Idea: Have a "Check Mark" box to show completion of objective(s) for current Level->Zone.
		   
		   - Side Objectives:  
		   
				   - These would be configured on the Zone object to allow the player to find some kind of other hidden
					 room, passage, etc... But essentially use the same engine to create the objective that would be used
					 for linear progression.
					 
						- Examples:  Switched door, hidden passage, keyed door, hidden cache (treasure chest), hidden room, etc...
						
				   - These would be optional so don't require explanation (text)
				
		   - Exit Conditions:  HAVE TO BE ABLE TO GO BACKWARDS.
		   
				   - Switch:  Two state doodad, Riddle Doodad, Temporary event, Weighted doodad
				   
						- Two State Doodad:  ON or OFF - icon for each state
						- Riddle Doodad:     Set the dials on the doodad to create a word to solve the riddle
						- Weighted Doodad:   Stepping on this triggers a "Zone Event" - which may be a timed event
											 
											 Idea:  Could use weight of items to weigh down the switch. So, would need
													weight parameter. Problem with overlapping weight of enemy, or flying enemy, etc...
													
											 Idea:  Push, Pull a block to set on the switch.
											 
											 Idea:  Create a push / pull block problem to solve (like seen in many games) to advance
													to the next zone.
													
										     Idea:  Have switches that you must UN-weight in order to open the door (Example: pedestal)
													
				   - Defeat Enemy(ies):  Have to defeat a speific, all, or one of ____ enemies to advance
				   - Collect Item(s):    Have to collect specific items to advance

									     Idea:  Create special item room with a "pedestal" or point of interest for an item.
										 
										 Idea:  Create item "room" with points of interest.. (something similar)
										 
				   - Collect Key:   Hide the key somewhere to collect. 
				   
									- Generate in enemy inventory (MANDATORY)
									- Generate in level (MANDATORY)
									- Generate in treasure chest cache (MANDATORY)
									- Generate in special item room (MANDATORY)
									
		   - Reversable:  MUST BE ABLE TO GO BACKWARDS
		   
						  - For switched doors, have to have a switch on the other side (INCLUDES SIDE OBJECTIVES)
						  - For content related doors (enemies, items) have to leave the door open
						  
				  
				
- Recipes: New consumable type that blends other misc consumables to create a new one

- Animation refactoring:  Support for...

		- Fading Chain (chain lightning)
		- Earthquake! (shaking screen)
		- "Jumps" (Character jumps .. like a prelude to an "Earthquake" skill or something)
		- Other shapes (square, rectangle, some, other, enumerated, types)
		- Easing functions
		- More interesting animations (ease out, come back, etc...)
		- Better language to describe more complex animations
		- Slow animation speeds relative to animation time
		- Criss Cross animation
		- Tracers!
		- Spiral inward
		
- Alteration Effect: Push Back Enemies ("X" number of spaces).. Possibly on a "Wave" with animations (but that's tricky)

- Teleportation:  Add a standard animation for teleporting that shows the trajectory of the path to the new location.						

- Character classes:  Add class selection and set for equipment. Provide choice at the beginning of class.
					 (Defined in Scenario): Example: Elf, Dwarf, Employee, Wizard, Worlock, etc... These would
					 have equipment trade-offs, combat implications, and attribute bonuses.
					 
					 Equipment: Have different patameter sets per class. OR just a flag to say "Out of class" or "In class"
								to make it simpler.
								
					 Idea:  Chose race (elf, golem, etc...); chose attack attribute bonus to start with. Race could make you 
					 immune to certain altered states.
					 
					 Also, could spend points at start instead of being assigned attribute values. So, need more intelligence,
					 and agility combat consequences.

				     Altered States:  Certain classes are immune from certain states. Example: Stone Golem immune from stone..

					 Enemy Classes:   Could support combat adjustment from interacting character classes. Example:  Stone Golem
									  has a multiplier v.s. Wizard and Worlock classes. Or, a "Miss Ratio" multiplier.. But these
									  would be set up in the Scenario Editor.. 

									  Setup:  Character Class "Elf": (contains) ClassAttribute, List<ClassAttributeMelee>
											  
											  ClassAttribute:  Any Player Stat (Strength, Agility, ..., Attack, Defense, Miss Ratio, Dodge, Critical Hit, etc...)
															   with a bonus. This would show up as a Passive Alteration. The effect could be positive or negative.

											  ClassAttributeChange = ClassAttribute (modification) + EnemyClassName

														       The effect of this would be to modify the player's stat (determined by the ClassAttribute)
															   during Melee combat ONLY.

															   WOULD REALLY WANT TO SHOW PEOPLE WHAT WAS HAPPENING HERE. So, extra combat messages are 
															   preferred to show.

															   Example:  "Stone Golem" is immune to Altered State = "Stone". His class attribute is
																	     + 0.3 for Critical Hit.

																		 Against Wizard:		    Class Attribute = -5 Intelligence
																		 Against Elf:			    Class Attribute = -3 Agility
																		 Against Water Elemental:   Class Attribute = -10 Defense
									
																	     Message (Water Elemental):  Leviathan attacked Ryan
																									 HP = 43 + Attack Attributes...
																									 Bonus attack for Water Elemental = 32

					 
- Weapons "Gain Experience" from defeating enemies. So, they would "grow" with your character. 

- Enemy Alteration Effect on being hit: Example: "Jelly" divides into two when hit.

- Enemy "Alteration": Riddle.... Example: The riddle of the sphinx. Alteration Effect applied if answered incorrectly (?) or correctly(?)
				
					  OR!  Just a riddle from a doodad - have one incorrect and one correct answer.
					  
					  So, would want to support RIDDLES!!!
					  
- Add - Electricity symbols.. things for lightning!

- ISSUE - Have to use engage radius as enemy "light radius". PROBLEM: HAVE TO FIX PERFORMANCE ISSUE OF MULTIPLE LIGHT RADII USING
		  WPF OPACITY MASKS. PLANNING TO TRY PAINTING ALL TO A SINGLE BITMAP AND THEN APPLYING THE OPACITY MASK ONCE.
						  
-  Add - "Scenario Oracle" - just an endless identify doodad at the end of each scenario to show the total % complete in the stats.
							 (OR) Just identify everything the player has found.
						  
- (TBD) Fade-in for opening animation; and on opening level (Also fade out when player death)					

- Icon sets: This is for randomizing item glyphs. So, probably apply to just items; but support List<SymbolDetails> for the template ONLY.

			 - Design Problem:  How to pick a random symbol from the set but keep it consistent for the rest of the scenario.
			 
- Player Stat:  Miss Ratio - BASED ON AGILITY and Equipment "Out of Class" flag. 
				
				Idea:   This stat would be factored in during combat. It would also be available for alterations
				
				Class:  Flag for equipment saying "Out of class" means that the item isn't meant to be used for that 
						character (bigger idea was class selection .. but it's not part of the game yet)
						
						So, this flag says whether or not the player has trouble wielding the weapon or piece of equipment.
						
				Effect: A simple melee calculation adjustment to factor in Miss Ratio (or Miss %).
				
				Idea:   Need way to communicate this to the user. Either we have a class specification for the player 
						on startup; and use this to specify all equipment classes.. 
						
						Example:  Scenario classes:  "Heavy Fighter", "Ranger", "Archer", "Pyro Ranger", etc...
						
								  Equipment "Fire Axe":  In Class for "Pyro Ranger", "Heavy Fighter", but Out of class for
														 "Archer", and "Ranger".
														 
								  Message to Fighter -> Ranger (class):  Equipped "Fire Axe", "Miss Ratio" Stat altered by -0.2
								  
						Simple Example:  NO Extra Classes
						
										 Equipment "Wizard Staff": Marked "Out of class" for the Fighter. So Miss Ratio altered by -0.3
								  
- Equip Messages:  Show stat changes when equipping.								  

- Player Stat Points:  AT THE BEGINNING - ALLOW USER TO SETUP PLAYER STATS USING POINT SYSTEM.

- WPF RENDER REFACTORING:  PERFORMANCE IS A PROBLEM. WANT TO TRY DRAWING THE PATH DATA TO A BITMAP BEFORE RENDERING TO TRY AND 
						   SPEED UP PERFORMANCE. IF IT WORKS - THEN GO FOR THE NEXT LAYER WHICH IS THE OPACITY.
						   
- Equipment Explainations: Add section to show parameter changes by %.

- Equipment Quality Enhancement:  Alteration to enhance quality value for equipment! Need to separate armor types
								  and weapon types just like for Enchant and Imbue.

								  Example:  Sharpening Stone - Upgrades Quality for weapons by 0.3! :)

								  Example:  Anvil - (would need ImageResources) Upgrades Quality for Armor by 0.3! :) :)

								  Name:  Maybe "Upgrade Weapon" and "Upgrade Armor"

- Player "Aura" Refactoring:  Several things...
		
		1) Separate Auras from Light Radius

		2) Use Aura Effect Range to create new aura on top of the light radius. 

		3) Choose whether to change Light Color or to apply Aura on top of Light Circle

		4) Show effect range in the Alterations screen.

		Effectively this should separate the two and show them independently
						  
- PLAYER DEATH R.I.P. TOMBSTONE

- Messages when objective has been acheived

- Agility:  Figure out how calculations for Dodge are done

		    - Should have an agility component; but not entirely because it wouldn't balance well

			  Example:  Dodge = enemy.GetAgility() / player.GetAgility()

						player agility = 100
						enemy agility = 100

						dodge = 1 => certain

	        - Idea:  Can use trancendental function to describe dodge probability. Possibly an arctan 
					 function or asymptotic function.

					 MUST support attribute balancing.

					 MEANS that you can modify it with Alterations.

			  Example:  Dodge = enemy.GetDodge() + function(enemy.GetAgility(), player.GetAgility())

						Where enemy.GetDodge() returns the base component (altered by all effects and equipment)
						and the other component is the asymptotic component.

						The sum should be less than or equal to 1. So, balance accordingly.

			- Also:  Want to support "Miss Ratio" character stat - which has to be factored into the calculation. So,
				     need better understanding or model for the asymptotic parts using Agility so that player can
					 progress and balancing is more interesting.

			- So... Basically - two parts to the calculations for "Dodge" and "Miss Ratio". A base part of the 
					attribute - which is modifiable by alterations and equipment bonuses (or balances depending on class) - 
					also by Alterations.. and an asymptotic part that is relative to the enemy's Agility.

- Enemy List:  Similar to enemy scope; but is a list of enemys just during combat. Shows all enemies in visible range
			   and their relevant attributes - (Mostly progress Health bar would be the best).

			   Several Ideas...

			   Idea:  Only show health meter until "Knowledge" of this enemy is increased

					  - Maybe, increase using a ratio or function of enemy / player intelligence
					  - Increase based on defeating many of the same enemies
					  - Possibly increase based on alteration (NOT LIKELY)

			   Idea:  Show in the dialog window using a split window during combat

			   Idea:  Show the last hit as first in the list. So, do an insert at the top for the last
					  enemy hit.

			   Idea:  Show this meter over the head of each enemy (similar to a live action game)

					  LIKE THIS IDEA:  It saves lots of room; and would be simple if included as part of
									   a custom framework element for each enemy. Just create a framework 
									   element; and set the progress bar's render transform to offset it 
									   "above their heads".

- Refactor "SpellTemplate" to "AlterationTemplate"

- Fix calculations in Scenario Difficulty Service for attack attibute melee.

- Refactoring:  Alteration -> Mental Alteration, Physical Alteration, Equipment Alteration, etc...
							  Trying to figure out best way to break up that class into smaller parts.

				- When Refactoring: Create another level of abstraction to add other parts to a "Spell", or "Skill",
									or "Special Effect".. including animations, display text, etc... So that it makes sense
									in terms of parameters.

- Equipment Balancing:  Some new parameters to consider. These could be mostly calculated; but flags or support from
						Equipment items need to be considered.

						- Miss %:  Calculated based on character strength, agility, class, etc...
						- Quality: Change this to "Attack Value" or "Power" - And calculate based on
								   strength, agility, intelligence, character level, speed, etc... (possibly with flag support)
								   ("Grows with Level") - Power = Quality * Level.
								   ("Grows with Enemies Slain") - Power = Quality * Enemies Slain.

						Alterations could accompany the new parameters. Example:  "Sharpening Stone" improves base quality
						instead of attack attribute.

---------
						  
- Add - Scenario details to Open screen
- Add - MP Low behavior
- Add - Message when saving game
- Add - Messages for spell alterations (melee messages)

- Change - Maze level "Dim Gray" to something brighter or colored (Firebrick Red)
- Change - Zealot skeleton animation to single blink
- Change - Remove "Mood" from player status and maybe add altered state "quick panel"

- ISSUE - "Standoffish" Can't calculate path to run away or open obstacles like doors
- ISSUE - Have to put in safety checks for completely filled level (Get Random Cell will crash)
- ISSUE - Teleporting enemies are still shown. Can see their new location
- ISSUE - Fix door issue (not opening; but open.. can't see through)
- ISSUE - "Blink" animations reveal the level size. Should turn those into blink for the full screen
- ISSUE - Have to turn off Skill on Skill level up!
- ISSUE - Uncurse pre-condition not calculated. Allowed casting of alteration (item grid). Also, "back" button on dialog was visible
- ISSUE - Pitfall STILL VISIBLE
- ISSUE - Add paging to ellipse panel
- ISSUE - Need way to systematize placing level content (on the backend). So, probably best to have the IModelService place ANY contents
		  So that it can always check for free cells to place content on. If there's no cell available - need to decide how to proceed.. may
		  be that the content is objective and therefore has to be placed.
- ISSUE - See Invisible isn't working.
- ISSUE - Reveal isn't showing invisible enemies
- ISSUE - SPEED DIVIDE BY ZERO PROBLEM - Change to check for zero speed; and return 1. Example:  chacter.GetSpeed() / player.GetSpeed()
			  
- Fix - Spell max level didn't shut off learning. Also need to change UI to show max level; and display the skill set icon
- Fix - Skill learning didn't work when player learned skill AFTER required level
- Fix - Multi-use consumables not updated after use
- Fix - Problem with Blindness - didn't recalculate enemy visibility immediately
- Fix - Zealots didn't move around
- Fix - Enemy opens door - trigger topology change (something went wrong.. didn't show door opened)
- Fix - Apply limits to MP (negative value on Lynx evaporate MP)
- Fix - Update player symbol when activating skill (should be done on turn)
- Fix - Add Attack Attribute melee message to player spell and enemy spell (meleetarget)
- Fix - Spiral Target with constant velocity animation caused crash "Trying to calculate const velocity for spiral animation"
- Fix - "Vile Mother has used 'Create Vile' on"
- Fix - Identify for non-class items should identify all future non-class items with the same RogueName
- Fix - Identify All isn't updating the Encyclopedia view
						
- Balancing (Paladin) - Add some skills for learning: Disciple, Satanic Priest, maybe one or two other.. but EViL! >_<

--------------

IMMEDIATE TODO'S:

	- Re-scale speed:  Use integer values from 1 - 10. Then use ratio of speed as we do now => Min Speed = 1 / 10 = 0.1. Max Speed = 10 / 1 = 10.
	
	- Equipment Quality Changing Alterations:  Class Change / Quality Change + plus or - minus. Example (sharpening Stone) + 0.1 to quality. Or skill of	
											   enemy changes quality -0.3 (stone golem or something chips your blade). So, new alteration types required:
											   
											   - Decrease Weapon Quality:  Alteration used as skill by enemy (or player) to degrade character equipped weapon
																		  quality.
																		  
											   - Decrease Armor Quality:  (similar)
											   
											   - De-Enchant Weapon:  Alteration to degrade equipped weapon class (used by enemy or player as skill).
											   
											   - De-Enchant Armor:   (similar)
											   
											   - Increase Weapon Quality:  Alteration used by Player ONLY to upgrade any weapon's quality (using UI to select)
											   
											   - Increase Armor Quality:  (similar)
											   											   
											   

	- Intelligence Scaled Alterations:  TotalValue = Value * (1 + Character.GetIntelligence()) applied to any alteration effect.		

		- Idea:  Similar to Dodge and Miss Ratio - have two parts to Intelligence based combat.

				 ***INTELLIGENCE BASED ALTERATIONS ONLY***

				 Block = function (defender's base intelligence, defender's Alterations) + 
						 function (defender's total intelligence, attacker's total intelligence)

				 Combat Value = function (attacker's total intelligence * Alteration Paraeters) - 
								function (defender's total intelligence)

				 NOTE*** NEED FLAG ON ALTERATION TO SAY WHETHER IT'S CONSIDERED PHYSICAL OR MENTAL. This is
						 required to show how to calculate the Block portion of combat.

					     Example: Alteration called "Stun" used by an Ogre. This would be considered Physical; and
								  should be blocked by Agility and/or Strength. NOT Intelligence.

				 So, the combat value is both scaled by the attacker's BASE intelligence * Alteration Parameters
				 AND the defense value which is a function of the defender's intelligence.

				 Also, a "Block" means that the attackee has completely negated the Alteration.

				 Point #1:  Each of the "Block" and "Combat Value" have 2 distinct parts. The first is a
							function of the BASE Intelligence (for Block). This would provide scaling up based on
							just the innate property of the character. The Attack is given extra weight because
							it takes the attacker's TOTAL intelligence into account. The defender also has
							a chance to utilize this total for defense.

							The 2nd part of the "Block" calculation is an asymptotic function based on some ratio 
							of each character's TOTAL intelligence. This would provide an adjustment for character level and
							otherwise relative intelligence.

				 Point #2:  The BASE part of each of these can/should be modified/modifiable by an
						    Alteration Effect. These would provide an absolute offset to the the base. Such
							alterations can be passive equipment bonuses (or character class if that's introduced).

		- Design Problem:   Implementing target Alteration Effects with Intelligence Scaling requires that they're calculated
							BEFORE detaching to send to the target character's Alteration list. 

							This will apply to both source and target alterations to avoid ambiguity; and only for those
							that are marked "Scale with Intelligence".

		- Agility Scaled Combat:  (Described Above). Going to implement now as it's similar to intelligence scaled
								  combat; and would provide some actual dynamics to the current relative agility 
								  scaling of the scenario enemies. 

								  Also, would want to go back and adjust balancing based on these new ideas - so should
								  do both immediately.

								  For now, JUST DO DODGE CALCULATION. That will provide enough to balance until there's
								  enough time to go back and do character classes.
				 

	- The Bigger Problem:  Seeing issues with Attack Attribute scaling

		- Problem:  Scaling combat value by intelligence suggests mismatch between physical and alteration based
					fighting. (i.e. use in one doesn't match use in the other)

					Example:  Fireball Alteration has Fire attribute scaled by intelligence.
							  Enemy uses Fire attribute for melee.

							  One is scaled by intelligence for both attack and defense. The other is
							  not scaled at all. So, your character has trouble with one enemy but not
							  another in terms of the Fire attribute.

		- Solution:  Create scaling for both Strength and Intelligence; and use flags on the attack attributes
					 to determine whether or not they're included in Alteration combat and Physical combat.

		- Bigger Problems Solved with this:

				1) Remove Weakness parameter (not scaled properly as Attack and Resistance)
				
				2) Remove updating of lists of Attack Attributes on each asset. Only add as required
				   for each instance - to a specified attack attribute list.

				3) Solve scaling issues for both cases - Physical and Alteration. Driven mostly by
				   base parameters unless extra balancing is desired.

				4) Fix scale of Attack and Resistance (0 - 1000)

				5) Systematize Attack Attributes for futue concerns (possibly Agility scaled attributes)

				6) Separate the UI to show applying either Attack or Resistance based on usage. Also 
				   Describe "MeleeTarget" alteration as "Intelligence Based Combat".

		- Nice to have:  Explain attack attributes by having a separate UI to show how they apply