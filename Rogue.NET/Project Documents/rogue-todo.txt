- Outro Display (I Won! - Here's my stats!) (STATS TBD)
- Statistics Display (High Scores) (TBD)
- Reveal Image Transparency (TBD)
- HINTS (TBD)
- Layout Descriptions (To lend narrative to the story... "Evil Approaches..." .. "These are the blah blah blah of the evil blah blah blah"
- Categorize: Skills / Spells; Equipment; Consumables; Animations (TBD)

(BIG TBD's)
- Player Action: Can choose to block physical (strength based), or magical (intelligence based), or maybe even to "run away" by
- 				 granting you an extra portion of a turn. This would be instead of just attacking. (TBD)

- Several Validation Points: 
	- Scenario Editor: Dungeon Template Name - UNIQUE and SET and NO FILE-NON-FRIENDLY CHARACTERS
	- Scenario: Player Name SET and UNIQUE and NO FILE-NON-FRIENDLY CHARACTERS
	- Scenario Files: Player Name + Scenario Name.. or put something in the header to show the scenario name also
- Scenario Editor: Fix up the Symbol Alteration logic for the UI. have to represent it properly for flags set.
- Dungeon Wide Events:  Alteration or note-bearing event that fires at random; or once during a specific level range. 
						- Example:  "Corruption" Adds to your player's "Corruption" level every 10,000 steps.. ish
						- Example:  "Turn back while you still can!" (from the big enemy of the scenario) (creates monster)
						- Example:  "Send player back to stairs up" :)  after X number of steps (pretty mean!)
						
- Boost Bar:  An extra boost to alterations or attack. This could be filled: On Step; On Enemy Death; On Attack. So, player 
			  can choose when to use their boost bar to add to the attack.			 

- Alteration:  Teleport within visible range or within range of X or something where enemies teleport near to the player's visible range

- Multi-Level Teleportation: Coordinated using multi-level layouts
- Tertiary Behavior

- Balancing (Paladin) - Add "teleport near (within attack range)" to Hell Hound (TBD)
- Balancing (Paladin) - Add "teleport adjacent" to teleport options (TBD)

- Layout Refactoring:

	- Goals:  Support for:
				- Random Room layouts
				- Intersecting rooms 
				- Maze rooms
				- Room inside a rooms
				- Boss levels (symmetric / static-ish layouts)
				- Hidden pathways: either hidden hallways randomly; hidden paths off the grid; or hidden paths between rooms
				- multiple halls between rooms
				- Big rooms specified by a clickable grid of rooms (specify which rooms are "grouped" in the room grid)
				- Add teleporters to any layout type
				- Points of interest (allows placing objective or unique content on those points)
				- Symmetric layouts
				- Specific shapes for layouts (pentagram, square thing, etc..)
				- Challenge levels (alternate stairwell for a challenge level)
				- Room levels without doors
				- Cell Fill color
				- Linear layouts v.s. non-linear (linear => start to end without options)
				- temporary walls (can demolish by walking through)
				- Switches and push blocks! (would use to open a door or let down a wall.. YEAh!)
				- Cellular Automata (with connected rooms with parameterized hallway thickness)
				- Room "Growing" - Start with a room, create a door or hall with random length. Then iterate to create the next room
				  or rooms (maybe 2 or 3)
				  
				- "Antfarm" procedure that uses random hall splitting (recursive)
				- Identify 'main room' or "first" and "last" rooms. Create connected rooms by showing they're connected to a single room
				  via some other room. First and Last rooms may have the stairwells.. So, could generate sequential "problem" set by having
				  conditions for advancement (beat a monster, find a key, etc..)
				- Monster generation per level (parameter) also, party room parameter
				
				- POINTS OF INTEREST:  Doodads are important to scenarios. Having special points of interest can make it possible to arrange
									   content to suggest a narrative - which is what Rogue.NET is supposed to be about.
									   
									   Idea:  Have points along the wall designated as POIs. 
									   
									   Idea:  Have points near an entrance (on each side) designated as POIs. (Idea from Brogue Dar Blademasters)
									   
				- Level Tree:  Have the level generation be a tree to support probabilistically generated branches of the scenario. 
				
							   Idea: Could randomly choose a stairs down image to help make it more difficult for people to know where to go.
							   
							   Idea: Could have stairs-up be sealed off.. but would have to reconnect to the primary branch at some point.
				
- Windows: Would treat like an open door that you can't pass through.. (But maybe could break)
				
- Zones:   Related to level layouts. 

		   - Idea: This would combine level content and layout generation
		   
		   - Goal: To separate the layout into "Zones" that are sequential. Each would have an "Exit Condition"
		   
				   - Step on a switch
				   - Defeat (All, Some, One of "These") enemies
				   - Collect Content
				   - Find a key

		   - Design Problem:  Have to build a layout based on a sequence of zones
		   
				   - ISSUE: CAN'T PERMIT "PITFALL" TYPE EFFECTS BECAUSE THEY BREAK SEQUENCE
				   - Can only allow linear progress through zones. CAN GO BACKWARD (RANDOM LEVEL UP) BUT NOT FORWARD (RANDOM LEVEL DOWN or PITFALL)
		   
		   - Idea: Description of zone problem built into scenario level zone template. 
		   
				   - Describes what to do for exit condition ALONG WITH story-line!
				   
					 GREAT. IDEA.
					 
					 Would allow for something like: "You're in King William's prison in the castle in Britain. You must find a 
													  way out of your cell.. Perhaps there's a secret passage nearby..."
													  
													  for the Level 1 template for zone 1! VERY. COOL.
													  
				   - This would give a LOT of power to the scenario by not only allowing for progressive rewards; but also accrued
					 descriptive - and totally configurable - storyline! :) :) VERY. VERY. GOOD.
					 
		   - Idea: Have a "Check Mark" box to show completion of objective(s) for current Level->Zone.
		   
		   - Side Objectives:  
		   
				   - These would be configured on the Zone object to allow the player to find some kind of other hidden
					 room, passage, etc... But essentially use the same engine to create the objective that would be used
					 for linear progression.
					 
						- Examples:  Switched door, hidden passage, keyed door, hidden cache (treasure chest), hidden room, etc...
						
				   - These would be optional so don't require explanation (text)
				
		   - Exit Conditions:  HAVE TO BE ABLE TO GO BACKWARDS.
		   
				   - Switch:  Two state doodad, Riddle Doodad, Temporary event, Weighted doodad
				   
						- Two State Doodad:  ON or OFF - icon for each state
						- Riddle Doodad:     Set the dials on the doodad to create a word to solve the riddle
						- Weighted Doodad:   Stepping on this triggers a "Zone Event" - which may be a timed event
											 
											 Idea:  Could use weight of items to weigh down the switch. So, would need
													weight parameter. Problem with overlapping weight of enemy, or flying enemy, etc...
													
											 Idea:  Push, Pull a block to set on the switch.
											 
											 Idea:  Create a push / pull block problem to solve (like seen in many games) to advance
													to the next zone.
													
										     Idea:  Have switches that you must UN-weight in order to open the door (Example: pedestal)
													
				   - Defeat Enemy(ies):  Have to defeat a speific, all, or one of ____ enemies to advance
				   - Collect Item(s):    Have to collect specific items to advance

									     Idea:  Create special item room with a "pedestal" or point of interest for an item.
										 
										 Idea:  Create item "room" with points of interest.. (something similar)
										 
				   - Collect Key:   Hide the key somewhere to collect. 
				   
									- Generate in enemy inventory (MANDATORY)
									- Generate in level (MANDATORY)
									- Generate in treasure chest cache (MANDATORY)
									- Generate in special item room (MANDATORY)
									
		   - Reversable:  MUST BE ABLE TO GO BACKWARDS
		   
						  - For switched doors, have to have a switch on the other side (INCLUDES SIDE OBJECTIVES)
						  - For content related doors (enemies, items) have to leave the door open
						  
				  
				
- Recipes: New consumable type that blends other misc consumables to create a new one

- Animation refactoring:  Support for...

		- RANDOM SEED EACH ANIMATION (NO REPEATS!)

		- Fading Chain (chain lightning)
		- Earthquake! (shaking screen)
		- "Jumps" (Character jumps .. like a prelude to an "Earthquake" skill or something)
		- Other shapes (square, rectangle, some, other, enumerated, types)
		- Easing functions (Normal easing, plus things like "Pause and go" that make it come alive!)
		- More interesting animations (ease out, come back, etc...)
		- Better language to describe more complex animations
		- Slow animation speeds relative to animation time
		- Criss Cross animation
		- Tracers!
		- Spiral inward
		- Lightning
		- Screen Shaking
		- Gas Animation (Something like burning flames.. figure out how to "diffuse" them upward)
		- Gaseous Projectile - Diffuse Bubbles while travelling / Also Goo (maybe have a weight parameter)
		- "Dim the Lights" (Turns down screen brightness during animation)
		- Explosion Animation - Something like a "half dome" over a character
		- "Hold End" Parameter
		
- Water:  Player has a "Water Meter". Standing water could be a doodad to replenish your supply. Would need alterations to
		  support water replenishment.
		  
		  Also, have skills that depend on water. (use water to cast a spell, etc..)
		
- Alteration Effect: Push Back Enemies ("X" number of spaces).. Possibly on a "Wave" with animations (but that's tricky)

- Teleportation:  Add a standard animation for teleporting that shows the trajectory of the path to the new location.						

- Character classes:  Add class selection and set for equipment. Provide choice at the beginning of class.
					 (Defined in Scenario): Example: Elf, Dwarf, Employee, Wizard, Worlock, etc... These would
					 have equipment trade-offs, combat implications, and attribute bonuses.
					 
					 Equipment: Have different patameter sets per class. OR just a flag to say "Out of class" or "In class"
								to make it simpler.
								
					 Idea:  Chose race (elf, golem, etc...); chose attack attribute bonus to start with. Race could make you 
					 immune to certain altered states.					

					 Also, could spend points at start instead of being assigned attribute values. So, need more intelligence,
					 and agility combat consequences.

				     Altered States:  Certain classes are immune from certain states. Example: Stone Golem immune from stone..

					 Enemy Classes:   Could support combat adjustment from interacting character classes. Example:  Stone Golem
									  has a multiplier v.s. Wizard and Worlock classes. Or, a "Miss Ratio" multiplier.. But these
									  would be set up in the Scenario Editor.. 

									  Setup:  Character Class "Elf": (contains) ClassAttribute, List<ClassAttributeMelee>
											  
											  ClassAttribute:  Any Player Stat (Strength, Agility, ..., Attack, Defense, Miss Ratio, Dodge, Critical Hit, etc...)
															   with a bonus. This would show up as a Passive Alteration. The effect could be positive or negative.

											  ClassAttributeChange = ClassAttribute (modification) + EnemyClassName

														       The effect of this would be to modify the player's stat (determined by the ClassAttribute)
															   during Melee combat ONLY.

															   WOULD REALLY WANT TO SHOW PEOPLE WHAT WAS HAPPENING HERE. So, extra combat messages are 
															   preferred to show.

															   Example:  "Stone Golem" is immune to Altered State = "Stone". His class attribute is
																	     + 0.3 for Critical Hit.

																		 Against Wizard:		    Class Attribute = -5 Intelligence
																		 Against Elf:			    Class Attribute = -3 Agility
																		 Against Water Elemental:   Class Attribute = -10 Defense
									
																	     Message (Water Elemental):  Leviathan attacked Ryan
																									 HP = 43 + Attack Attributes...
																									 Bonus attack for Water Elemental = 32

					 
- Weapons "Gain Experience" from defeating enemies. So, they would "grow" with your character. 

- Weapons can have an Attack Alteration that will heal the player when attacking an enemy. This would likely be
  a new / separate / weapons only alteration applied immediately. Could include animations; but they would be applied
  after the alteration effects due to problems forwarding an attack alteration to the ISpellEngine.

- Enemy Alteration Effect on being hit: Example: "Jelly" divides into two when hit.

- Enemy "Alteration": Riddle.... Example: The riddle of the sphinx. Alteration Effect applied if answered incorrectly (?) or correctly(?)
				
					  OR!  Just a riddle from a doodad - have one incorrect and one correct answer.
					  
					  So, would want to support RIDDLES!!!
					  
- Add - Electricity symbols.. things for lightning!

- ISSUE - Have to use engage radius as enemy "light radius". PROBLEM: HAVE TO FIX PERFORMANCE ISSUE OF MULTIPLE LIGHT RADII USING
		  WPF OPACITY MASKS. PLANNING TO TRY PAINTING ALL TO A SINGLE BITMAP AND THEN APPLYING THE OPACITY MASK ONCE.
						  
-  Add - "Scenario Oracle" - just an endless identify doodad at the end of each scenario to show the total % complete in the stats.
							 (OR) Just identify everything the player has found.
						  
- (TBD) Fade-in for opening animation; and on opening level (Also fade out when player death)					

- Icon sets: This is for randomizing item glyphs. So, probably apply to just items; but support List<SymbolDetails> for the template ONLY.

			 - Design Problem:  How to pick a random symbol from the set but keep it consistent for the rest of the scenario.
			 
- Player Stat:  Miss Ratio - BASED ON AGILITY and Equipment "Out of Class" flag. 
				
				Idea:   This stat would be factored in during combat. It would also be available for alterations
				
				Class:  Flag for equipment saying "Out of class" means that the item isn't meant to be used for that 
						character (bigger idea was class selection .. but it's not part of the game yet)
						
						So, this flag says whether or not the player has trouble wielding the weapon or piece of equipment.
						
				Effect: A simple melee calculation adjustment to factor in Miss Ratio (or Miss %).
				
				Idea:   Need way to communicate this to the user. Either we have a class specification for the player 
						on startup; and use this to specify all equipment classes.. 
						
						Example:  Scenario classes:  "Heavy Fighter", "Ranger", "Archer", "Pyro Ranger", etc...
						
								  Equipment "Fire Axe":  In Class for "Pyro Ranger", "Heavy Fighter", but Out of class for
														 "Archer", and "Ranger".
														 
								  Message to Fighter -> Ranger (class):  Equipped "Fire Axe", "Miss Ratio" Stat altered by -0.2
								  
						Simple Example:  NO Extra Classes
						
										 Equipment "Wizard Staff": Marked "Out of class" for the Fighter. So Miss Ratio altered by -0.3
								  
- Equip Messages:  Show stat changes when equipping.								  

- Player Stat Points:  AT THE BEGINNING - ALLOW USER TO SETUP PLAYER STATS USING POINT SYSTEM.

- WPF RENDER REFACTORING:  PERFORMANCE IS A PROBLEM. WANT TO TRY DRAWING THE PATH DATA TO A BITMAP BEFORE RENDERING TO TRY AND 
						   SPEED UP PERFORMANCE. IF IT WORKS - THEN GO FOR THE NEXT LAYER WHICH IS THE OPACITY.
						   
- Equipment Explainations: Add section to show parameter changes by %.

- Equipment Quality Enhancement:  Alteration to enhance quality value for equipment! Need to separate armor types
								  and weapon types just like for Enchant and Imbue.

								  Example:  Sharpening Stone - Upgrades Quality for weapons by 0.3! :)

								  Example:  Anvil - (would need ImageResources) Upgrades Quality for Armor by 0.3! :) :)

								  Name:  Maybe "Upgrade Weapon" and "Upgrade Armor"

- Player "Aura" Refactoring:  Several things...
		
		1) Separate Auras from Light Radius

		2) Use Aura Effect Range to create new aura on top of the light radius. 

		3) Choose whether to change Light Color or to apply Aura on top of Light Circle

		4) Show effect range in the Alterations screen.

		Effectively this should separate the two and show them independently
						  
- PLAYER DEATH R.I.P. TOMBSTONE

- Agility:  Want to support "Miss Ratio" character stat - which has to be factored into the calculation. So,
			need better understanding or model for the asymptotic parts using Agility so that player can
			progress and balancing is more interesting.

- Enemy List:  Similar to enemy scope; but is a list of enemys just during combat. Shows all enemies in visible range
			   and their relevant attributes - (Mostly progress Health bar would be the best).

			   Several Ideas...

			   Idea:  Only show health meter until "Knowledge" of this enemy is increased

					  - Maybe, increase using a ratio or function of enemy / player intelligence
					  - Increase based on defeating many of the same enemies
					  - Possibly increase based on alteration (NOT LIKELY)

			   Idea:  Show in the dialog window using a split window during combat

			   Idea:  Show the last hit as first in the list. So, do an insert at the top for the last
					  enemy hit.

			   Idea:  Show this meter over the head of each enemy (similar to a live action game)

					  LIKE THIS IDEA:  It saves lots of room; and would be simple if included as part of
									   a custom framework element for each enemy. Just create a framework 
									   element; and set the progress bar's render transform to offset it 
									   "above their heads".

- Refactor "SpellTemplate" to "AlterationTemplate"

- Fix calculations in Scenario Difficulty Service for attack attibute melee.

- Refactoring:  Alteration -> Mental Alteration, Physical Alteration, Equipment Alteration, etc...
							  Trying to figure out best way to break up that class into smaller parts.

				- When Refactoring: Create another level of abstraction to add other parts to a "Spell", or "Skill",
									or "Special Effect".. including animations, display text, etc... So that it makes sense
									in terms of parameters.

- Equipment Balancing:  Some new parameters to consider. These could be mostly calculated; but flags or support from
						Equipment items need to be considered.

						- Miss %:  Calculated based on character strength, agility, class, etc...
						- Quality: Change this to "Attack Value" or "Power" - And calculate based on
								   strength, agility, intelligence, character level, speed, etc... (possibly with flag support)
								   ("Grows with Level") - Power = Quality * Level.
								   ("Grows with Enemies Slain") - Power = Quality * Enemies Slain.

						Alterations could accompany the new parameters. Example:  "Sharpening Stone" improves base quality
						instead of attack attribute.

- Alteration Effect:  "Reactive Temporary/Passive"	Applies Attribute change as a counter attack. And "Attack Attribute Reactive Temporary/Passive"
					  That applies counter attack attribute attack.

- Equipment Quality Changing Alterations:  Class Change / Quality Change + plus or - minus. Example (sharpening Stone) + 0.1 to quality. Or skill of	
											enemy changes quality -0.3 (stone golem or something chips your blade). So, new alteration types required:
											   
											- Decrease Weapon Quality:  Alteration used as skill by enemy (or player) to degrade character equipped weapon
																		quality.
																		  
											- Decrease Armor Quality:  (similar)
											   
											- De-Enchant Weapon:  Alteration to degrade equipped weapon class (used by enemy or player as skill).
										   
											- De-Enchant Armor:   (similar)
											   
											- Increase Weapon Quality:  Alteration used by Player ONLY to upgrade any weapon's quality (using UI to select)
											   
											- Increase Armor Quality:  (similar)

- Noise dynamic attribute:  Can have noise level.. Noise can be generated by walking, or fighting. Items can have a noise
							multiplier or contribution.. Can also add to alteration effect (noise dampening). Noise
							would have the effect of engaging enemies from a radius determined by the noise level. It could
							also give away your location if you're invisible.

							**Could also have the calculation based on how quickly you make moves - (i.e. the time between
							  moves). Would be kind of neat :)

- Strength Requirement for Equipment

- Contraptions:  Consumables that can set up a doodad in the level. 

- Doodad Effect:  Have it automatically hit all enemies without having to target.  Also, want to support "Everyone in Range"
				  and "Everyone except source in Range"
				  
				  Another Effect:  Attracts Enemies (Need another character state called "Aggrevated" to have an effect on
				  enemies and maybe also Player.
				  
- Enemy Behavior:  Want to expand on current behaviors and starting positions. Would like to support groups or hordes of 
				   enemies. Also, want to employ a tertiary behavior.. Considering having them do something on each turn 
				   besides wait for the player.. Brogue has them Wander -> Sleep -> Hunt.

- Doodad:  Timed fire doodad. Triggered by character movement in range.

- Alteration Effect:  Sanctuary... Needs design :)  
- Alteration Effect:  Telepathy... Brogue ripoff :( But lots of fun! :)
- Alteration Effect:  True Polymorph (random enemy)

- Brogue Idea:  Searching.. can have search timers for objects near player. Doodads / hidden doors. Basically, implement above
				Brogue-style search without the "timed event". Really like how that plays.
				
- Brogue Idea:  Self-Identify.. One major problem in Rogue.NET and other rogue likes is the number / amount / variety of different
				items that are important to the story. Brogue lets you self-identify over a number of turns. I'd like to turn this
				up a notch and have items become more important and have more levels of depth (where appropriate).
				
				Many ideas... Have a static / dynamic number of "levels of depth" for each equipment item - allowing for identified traits at
				each level (big design problem here).  
				
					Example:  "This is a short steel sword" (Level 0 Description)
					
							  "This is a short steel sword that belonged to someone of the British Empire. It appears to be 
							   high quality" (Level 1 Description)
							   
							  "This is King William's personal guardian sword. It has this magical property" (Level 2 Description)
							  
					Example (Consumable):  "The scroll appears to have a red wax seal" (Level 0)
					
										   "The scroll has a gentle aura of goodness about it" (Level 1)
										   
										   "The scroll casts a spell of Healing" (Level 2)
				
				Progressing from one level to the next could just take a number of turns.
				
- Religions:  Would still like a way to naturally build your affiliation rather than relying on shrines or altars or special objects.

- Keys:  Consider getting rid of modifiers for doors / fighting.
				   
----------------------------
						  
- Add - Scenario details to Open screen
- Add - MP Low behavior
- Add - Message when saving game
- Add - Messages for spell alterations (melee messages)

- Change - Maze level "Dim Gray" to something brighter or colored (Firebrick Red)
- Change - Zealot skeleton animation to single blink

- ISSUE - "Standoffish" Can't calculate path to run away or open obstacles like doors
- ISSUE - Have to put in safety checks for completely filled level (Get Random Cell will crash)
- ISSUE - Teleporting enemies are still shown. Can see their new location
- ISSUE - Fix door issue (not opening; but open.. can't see through)
- ISSUE - "Blink" animations reveal the level size. Should turn those into blink for the full screen
- ISSUE - Uncurse pre-condition not calculated. Allowed casting of alteration (item grid). Also, "back" button on dialog was visible
- ISSUE - Pitfall STILL VISIBLE
- ISSUE - Need way to systematize placing level content (on the backend). So, probably best to have the IModelService place ANY contents
		  So that it can always check for free cells to place content on. If there's no cell available - need to decide how to proceed.. may
		  be that the content is objective and therefore has to be placed.
- ISSUE - See Invisible isn't working.
- ISSUE - Reveal isn't showing invisible enemies
			  
- Fix - Skill learning didn't work when player learned skill AFTER required level
- Fix - Multi-use consumables not updated after use
- Fix - Problem with Blindness - didn't recalculate enemy visibility immediately
- Fix - Zealots didn't move around
- Fix - Enemy opens door - trigger topology change (something went wrong.. didn't show door opened)
- Fix - Apply limits to MP (negative value on Lynx evaporate MP)
- Fix - Update player symbol when activating skill (should be done on turn)
- Fix - Add Attack Attribute melee message to player spell and enemy spell (meleetarget)
- Fix - Spiral Target with constant velocity animation caused crash "Trying to calculate const velocity for spiral animation"
- Fix - "Vile Mother has used 'Create Vile' on"
- Fix - Identify for non-class items should identify all future non-class items with the same RogueName
- Fix - Identify All isn't updating the Encyclopedia view
						
- Balancing (Paladin) - Add some skills for learning: Disciple, Satanic Priest, maybe one or two other.. but EViL! >_<

--------------

IMMEDIATE TODO'S:

	- Clear out message box when re-starting.

	- Use points to increase stats instead of randomly doing it when gaining a level.
							  
	- Nice to have:  Explain attack attributes by having a separate UI to show how they apply
---------------
	
	- Cosmetic:  Widen the type selectors for layouts.
	- Linear Corridors:  Need new corridor type to make diagonal corridors look nice
	- Jail Cell Level:   Consistently chose the same connection points (Investigate)
	- Random Room Placement:  Need spreading parameter; padding to fix wall error on layout; and set max size based on these.
	- Random Room Placement:  Need to check the case of overlapping rooms - might want to use Flood Fill to identify them.
	- Animations:  For source = target case, prevent crash; but log a warning somewhere	
	- Validation:  For certain types of layout combinations - have to auto-set some of the parameters that aren't used (so they pass validation)
	- PERMADEATH
	- Religion:  Get rid of interactions completely EXCEPT for blocking Alterations. 
				 Just keep it as a requirement for using items, doodads, and skills. Also, get rid of affiliation level.	
	- NEXT BIG TODO:  Figure out a way to calculate combat value for items based on player parameters (Level, Strength, Agility, Intelligence)
	- OTHER BIG TODO:  Redo enemy behavior
	- OTHER OTHER BIG TODO:  Terrain
	- TODO: Path-finding efficiency