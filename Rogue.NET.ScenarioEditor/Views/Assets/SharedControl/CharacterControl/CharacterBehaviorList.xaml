<UserControl x:Class="Rogue.NET.ScenarioEditor.Views.Assets.SharedControl.CharacterControl.CharacterBehaviorList"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:views="clr-namespace:Rogue.NET.Common.View;assembly=Rogue.NET.Common"
             xmlns:behavior="clr-namespace:Rogue.NET.ScenarioEditor.Views.Assets.SharedControl.CharacterControl.BehaviorControl"
             xmlns:region="clr-namespace:Rogue.NET.Common.Extension.Prism.RegionManager;assembly=Rogue.NET.Common"
             xmlns:coreModelEnums="clr-namespace:Rogue.NET.Core.Model.Enums;assembly=Rogue.NET.Core"
             xmlns:toolkit="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
             xmlns:controls="clr-namespace:Rogue.NET.ScenarioEditor.Views.Controls"
             Background="Black" FontSize="14">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Rogue.NET.Common;component/Resource/Dictionaries/ButtonSpinner.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Rogue.NET.Common;component/Resource/Dictionaries/ShinyTextButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Rogue.NET.Core;component/Resource/Converter.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Rogue.NET.ScenarioEditor;component/Resources/Dictionaries/Converter.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Add-Behavior Button -->
        <StackPanel>
            <!--Grid>
                <TextBlock Foreground="White" Margin="10" FontSize="16" TextWrapping="Wrap" Width="600" HorizontalAlignment="Left"
                           Text="Enemy behavior is treated like a state machine. You can set up the list of behaviors (states) here. Each state is treated in turn - with 'entry' and 'exit' conditions to use the behavior. The 'Behavior Counter' is internal to the enemy behavior object and resets after a new state is selected. If no state is valid for use there is a default state that will take effect to control the behavior." />
            </-->
            <Grid>
                <TextBlock Foreground="White" Text="Add Behavior" VerticalAlignment="Center" Margin="10" />
                <Button x:Name="AddBehaviorButton" Content="Add Behavior" Click="AddBehaviorButton_Click" HorizontalAlignment="Right" Padding="4" VerticalAlignment="Center" />
            </Grid>
        </StackPanel>

        <!-- Behavior List -->
        <TabControl Background="Black" Grid.Row="1" Margin="0, 10, 0, 0" ItemsSource="{Binding BehaviorDetails.Behaviors}">
            <TabControl.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Name}" Foreground="White" VerticalAlignment="Center" Margin="0, 0, 4, 0" />
                        <Button x:Name="RemoveBehaviorButton" Click="RemoveBehaviorButton_Click" Grid.Column="1"
                                        Style="{StaticResource ShinyTextButtonStyle}" Height="20" Width="20" Cursor="Hand"
                                        FontFamily="{StaticResource FontAwesome}" Content="&#xf068;" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Foreground="White" Background="Black" />
                    </Grid>
                </DataTemplate>
            </TabControl.ItemTemplate>
            <TabControl.ContentTemplate>
                <DataTemplate>
                    <TabControl Background="Black">
                        <TabItem Header="Behavior Parameters">
                            <StackPanel>
                                <Grid>
                                    <controls:EnumFlagsControl Header="Entry Condition(s) (These are Logical AND)" EnumValue="{Binding BehaviorCondition, Mode=TwoWay}" EnumType="{x:Type coreModelEnums:BehaviorCondition}" />
                                </Grid>
                                <Grid>
                                    <controls:EnumFlagsControl Header="Exit Condition(s) (These are Logical OR)" EnumValue="{Binding BehaviorExitCondition, Mode=TwoWay}" EnumType="{x:Type coreModelEnums:BehaviorExitCondition}" />
                                </Grid>
                                <Grid>
                                    <TextBlock Foreground="White" Text="Behavior Turn Counter" VerticalAlignment="Center" Margin="10" />
                                    <toolkit:IntegerUpDown Minimum="1" Maximum="1000" Value="{Binding BehaviorTurnCounter, Mode=TwoWay}" AllowTextInput="True" AllowSpin="True" HorizontalAlignment="Right" Height="24" Width="200" />
                                </Grid>
                                <Grid>
                                    <TextBlock Foreground="White" Text="Movement Type" VerticalAlignment="Center" Margin="10" />
                                    <views:EnumComboBox HorizontalAlignment="Right" Width="200" Height="24" Grid.Column="1" EnumValue="{Binding MovementType, Mode=TwoWay}" EnumType="{x:Type coreModelEnums:CharacterMovementType}" />
                                </Grid>
                                <Grid>
                                    <TextBlock Foreground="White" Text="Attack Type" VerticalAlignment="Center" Margin="10" />
                                    <views:EnumComboBox HorizontalAlignment="Right" Width="200" Height="24" Grid.Column="1" Grid.Row="1" EnumValue="{Binding AttackType, Mode=TwoWay}" EnumType="{x:Type coreModelEnums:CharacterAttackType}" />
                                </Grid>
                            </StackPanel>
                        </TabItem>
                        <TabItem Header="Behavior Effect"
                                 Visibility="{Binding AttackType, Converter={StaticResource EnemyAttackTypeSkillVisibilityConverter}}">
                            <Grid>
                                <region:RogueRegion region:RogueRegionManager.DefaultViewType="{x:Type behavior:CharacterAlterationControl}"
                                                    DataContext="{Binding Alteration}" />
                            </Grid>
                        </TabItem>
                    </TabControl>
                </DataTemplate>
            </TabControl.ContentTemplate>
        </TabControl>
    </Grid>
</UserControl>

    